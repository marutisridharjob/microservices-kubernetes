step-by-step guide to deploy your Spring Boot project into Kubernetes.

1. Prerequisites

Before deploying to Kubernetes, ensure the following:
	1.	Kubernetes cluster is set up (local like Minikube or cloud-based like GKE/EKS/AKS).
	2.	kubectl CLI is installed and configured to access the cluster.
	3.	Docker is installed to build container images.

 2. Prepare the Application

2.1 Create the Dockerfile

Add a Dockerfile in your Spring Boot project root directory:

# Use OpenJDK 17 image as base
FROM openjdk:17-jdk-slim
VOLUME /tmp
ARG JAR_FILE=target/demo-0.0.1-SNAPSHOT.jar
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java", "-jar", "/app.jar"]

2.2 Package the Application

Use Maven to package the application:

mvn clean package

This will generate the JAR file in the target directory.

2.3 Build the Docker Image

Build a Docker image using the Dockerfile:


docker build -t springboot-k8s-demo:1.0 .

2.4 Test the Docker Image Locally

Run the Docker container locally to ensure it works:

docker run -p 8080:8080 springboot-k8s-demo:1.0

Visit http://localhost:8080/api/test-cases to verify.

3. Push the Docker Image to a Container Registry

You need to push your Docker image to a registry accessible by the Kubernetes cluster (e.g., Docker Hub, AWS ECR, GCP Artifact Registry).

3.1 Log in to Docker Hub

docker login

3.2 Tag the Docker Image

Tag the image with your Docker Hub repository name:

docker tag springboot-k8s-demo:1.0 <your-dockerhub-username>/springboot-k8s-demo:1.0

3.3 Push the Image

Push the image to Docker Hub:

docker push <your-dockerhub-username>/springboot-k8s-demo:1.0

4. Create Kubernetes Deployment and Service YAML Files

4.1 Deployment YAML

Create deployment.yaml for deploying your application:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-k8s-demo
  labels:
    app: springboot-k8s-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springboot-k8s-demo
  template:
    metadata:
      labels:
        app: springboot-k8s-demo
    spec:
      containers:
      - name: springboot-k8s-demo
        image: <your-dockerhub-username>/springboot-k8s-demo:1.0
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_DATASOURCE_URL
          value: jdbc:db2://<db-host>:<db-port>/<db-name>
        - name: SPRING_DATASOURCE_USERNAME
          value: <db-username>
        - name: SPRING_DATASOURCE_PASSWORD
          value: <db-password>


Replace <your-dockerhub-username>, <db-host>, <db-port>, <db-name>, <db-username>, and <db-password> with your values.


4.2 Service YAML

Create service.yaml for exposing the application:

apiVersion: v1
kind: Service
metadata:
  name: springboot-k8s-demo-service
spec:
  selector:
    app: springboot-k8s-demo
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: LoadBalancer



5. Deploy to Kubernetes

5.1 Apply Deployment

Deploy the application:


kubectl apply -f deployment.yaml



5.2 Apply Service

Expose the application:

kubectl apply -f service.yaml


5.3 Verify Deployment

Check if pods are running:

kubectl get pods


kubectl get pods


Check if the service is running:

kubectl get svc

6. Access the Application

	•	For local clusters (e.g., Minikube), use the following command to expose the service:

 minikube service springboot-k8s-demo-service

 It will open the application in your browser.

	•	For cloud clusters, check the external IP of the service:

 kubectl get svc

 Access the application at http://<external-ip>/api/test-cases.

 7. Environment Variables in Kubernetes (Optional)

To avoid hardcoding sensitive database credentials in the YAML file, you can use Kubernetes Secrets and ConfigMaps.

7.1 Create Secrets for Database Credentials


kubectl create secret generic db-credentials \
  --from-literal=username=<db-username> \
  --from-literal=password=<db-password>


  7.2 Update Deployment to Use Secrets

Modify the deployment.yaml file:

env:
- name: SPRING_DATASOURCE_URL
  value: jdbc:db2://<db-host>:<db-port>/<db-name>
- name: SPRING_DATASOURCE_USERNAME
  valueFrom:
    secretKeyRef:
      name: db-credentials
      key: username
- name: SPRING_DATASOURCE_PASSWORD
  valueFrom:
    secretKeyRef:
      name: db-credentials
      key: password


8. Scaling the Application

To scale the application horizontally:

kubectl scale deployment springboot-k8s-demo --replicas=5

9. Monitoring and Logs

	•	Check Logs for a Pod:

 kubectl logs <pod-name>


 
	•	Describe a Deployment or Pod:

 kubectl describe deployment springboot-k8s-demo
kubectl describe pod <pod-name>

10. Clean Up

If you want to delete the deployment and service:

kubectl delete -f deployment.yaml
kubectl delete -f service.yaml

